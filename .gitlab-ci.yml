stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

test: # temp job
  stage: test
  script:
    - echo 'testing'

# Building all images. TODO - Figure out if we can build only if changes have occured?
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug 
    entrypoint: [""]
  script:  # See https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
    - echo 'building' 
  only:
    - main  

# Maybe this can work? One job for each service, only run if changes are made to it's directory.
build-client:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug 
    entrypoint: [""]
  script:  # See https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"  
      --dockerfile "${CI_PROJECT_DIR}/services/client/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/client:${CI_COMMIT_TAG:-latest}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:  # Include the job and set to when:manual if any of the follow paths match a modified file.
        - services/client/*

build-api-gateway:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug 
    entrypoint: [""]
  script:  # See https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"  
      --dockerfile "${CI_PROJECT_DIR}/services/api-gateway/Dockerfile.production"
      --destination "${CI_REGISTRY_IMAGE}/api-gateway:${CI_COMMIT_TAG:-latest}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:  # Include the job and set to when:manual if any of the follow paths match a modified file.
        - services/api-gateway/*

# TODO - Change to Blue/Green
deploy-staging:
  stage: deploy
  script:
    - echo 'deploying to staging'
  only:
    - main

# TODO - Change to Blue/Green
deploy-production:
  stage: deploy
  image:
    name: gcr.io/k8s-skaffold/skaffold:v2.0.0  # TODO - replace with a better Kubernetes image. Bitnami?
    entrypoint: ['']
  environment:
    name: production
    url: $PRODUCTION_URL # TODO - Set as environment variable. URL to your application. Ie HTTP://cscloud6-25.lnu.se
  when: manual # TODO - Make this not manual
  script:
    - kubectl config get-contexts
   # Configure kubectl to use our own k8s cluster, you need to setup an Gitlab agent in you k8s kluster
    - kubectl config use-context $K8S_CONTEXT
   # Authorize the cluster to pull images from our registry. (synced against Deploy Token "gitlab-deploy-token")
    - kubectl delete secret regcred || true
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD

    # - kubectl apply -f ./k8s/taskit.yaml -f ./k8s/mongodb.yaml -f ./k8s/redis.yaml # TODO - replace this with real services
     
  # Debugging outputs after completion
    - kubectl get deployments
    - kubectl get services
    - kubectl get pods
  only:
    - main  
    